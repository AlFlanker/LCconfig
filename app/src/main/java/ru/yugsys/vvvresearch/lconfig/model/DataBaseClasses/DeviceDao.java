package ru.yugsys.vvvresearch.lconfig.model.DataBaseClasses;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ru.yugsys.vvvresearch.lconfig.model.DataEntity.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DevicesTable".
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "DevicesTable";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Eui = new Property(2, String.class, "eui", false, "EUI");
        public final static Property Appeui = new Property(3, String.class, "appeui", false, "APPEUI");
        public final static Property Appkey = new Property(4, String.class, "appkey", false, "APPKEY");
        public final static Property Nwkid = new Property(5, String.class, "nwkid", false, "NWKID");
        public final static Property Devadr = new Property(6, String.class, "devadr", false, "DEVADR");
        public final static Property Nwkskey = new Property(7, String.class, "nwkskey", false, "NWKSKEY");
        public final static Property Appskey = new Property(8, String.class, "appskey", false, "APPSKEY");
        public final static Property Latitude = new Property(9, double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(10, double.class, "Longitude", false, "LONGITUDE");
        public final static Property OutType = new Property(11, String.class, "outType", false, "OUT_TYPE");
        public final static Property KV = new Property(12, String.class, "kV", false, "K_V");
        public final static Property KI = new Property(13, String.class, "kI", false, "K_I");
    }

    private DaoSession daoSession;


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
        stmt.bindString(3, entity.getEui());
        stmt.bindString(4, entity.getAppeui());
        stmt.bindString(5, entity.getAppkey());
        stmt.bindString(6, entity.getNwkid());
        stmt.bindString(7, entity.getDevadr());
        stmt.bindString(8, entity.getNwkskey());
        stmt.bindString(9, entity.getAppskey());
        stmt.bindDouble(10, entity.getLatitude());
        stmt.bindDouble(11, entity.getLongitude());
        stmt.bindString(12, entity.getOutType());
        stmt.bindString(13, entity.getKV());
        stmt.bindString(14, entity.getKI());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
        stmt.bindString(3, entity.getEui());
        stmt.bindString(4, entity.getAppeui());
        stmt.bindString(5, entity.getAppkey());
        stmt.bindString(6, entity.getNwkid());
        stmt.bindString(7, entity.getDevadr());
        stmt.bindString(8, entity.getNwkskey());
        stmt.bindString(9, entity.getAppskey());
        stmt.bindDouble(10, entity.getLatitude());
        stmt.bindDouble(11, entity.getLongitude());
        stmt.bindString(12, entity.getOutType());
        stmt.bindString(13, entity.getKV());
        stmt.bindString(14, entity.getKI());
    }

    @Override
    protected final void attachEntity(Device entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // type
            cursor.getString(offset + 2), // eui
            cursor.getString(offset + 3), // appeui
            cursor.getString(offset + 4), // appkey
            cursor.getString(offset + 5), // nwkid
            cursor.getString(offset + 6), // devadr
            cursor.getString(offset + 7), // nwkskey
            cursor.getString(offset + 8), // appskey
            cursor.getDouble(offset + 9), // Latitude
            cursor.getDouble(offset + 10), // Longitude
            cursor.getString(offset + 11), // outType
            cursor.getString(offset + 12), // kV
            cursor.getString(offset + 13) // kI
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getString(offset + 1));
        entity.setEui(cursor.getString(offset + 2));
        entity.setAppeui(cursor.getString(offset + 3));
        entity.setAppkey(cursor.getString(offset + 4));
        entity.setNwkid(cursor.getString(offset + 5));
        entity.setDevadr(cursor.getString(offset + 6));
        entity.setNwkskey(cursor.getString(offset + 7));
        entity.setAppskey(cursor.getString(offset + 8));
        entity.setLatitude(cursor.getDouble(offset + 9));
        entity.setLongitude(cursor.getDouble(offset + 10));
        entity.setOutType(cursor.getString(offset + 11));
        entity.setKV(cursor.getString(offset + 12));
        entity.setKI(cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
