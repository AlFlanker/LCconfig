package ru.yugsys.vvvresearch.lconfig.model.DataBaseClasses;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ru.yugsys.vvvresearch.lconfig.model.DataEntity.DeviceEntry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MainTable".
*/
public class DeviceEntryDao extends AbstractDao<DeviceEntry, Long> {

    public static final String TABLENAME = "MainTable";

    /**
     * Properties of entity DeviceEntry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property IsOTTA = new Property(2, boolean.class, "isOTTA", false, "IS_OTTA");
        public final static Property Eui = new Property(3, String.class, "eui", false, "EUI");
        public final static Property Appeui = new Property(4, String.class, "appeui", false, "APPEUI");
        public final static Property Appkey = new Property(5, String.class, "appkey", false, "APPKEY");
        public final static Property Nwkid = new Property(6, String.class, "nwkid", false, "NWKID");
        public final static Property Devadr = new Property(7, String.class, "devadr", false, "DEVADR");
        public final static Property Nwkskey = new Property(8, String.class, "nwkskey", false, "NWKSKEY");
        public final static Property Appskey = new Property(9, String.class, "appskey", false, "APPSKEY");
        public final static Property Latitude = new Property(10, double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(11, double.class, "Longitude", false, "LONGITUDE");
        public final static Property OutType = new Property(12, String.class, "outType", false, "OUT_TYPE");
        public final static Property KV = new Property(13, String.class, "kV", false, "K_V");
        public final static Property KI = new Property(14, String.class, "kI", false, "K_I");
        public final static Property Comment = new Property(15, String.class, "comment", false, "COMMENT");
        public final static Property DateOfLastChange = new Property(16, java.util.Date.class, "dateOfLastChange", false, "DATE_OF_LAST_CHANGE");
        public final static Property IsDeleted = new Property(17, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property IsSyncServer = new Property(18, Boolean.class, "isSyncServer", false, "IS_SYNC_SERVER");
        public final static Property IsGeoOK = new Property(19, Boolean.class, "isGeoOK", false, "IS_GEO_OK");
        public final static Property County = new Property(20, String.class, "county", false, "COUNTY");
        public final static Property City = new Property(21, String.class, "city", false, "CITY");
        public final static Property Address = new Property(22, String.class, "address", false, "ADDRESS");
        public final static Property Region = new Property(23, String.class, "region", false, "REGION");
    }

    private DaoSession daoSession;


    public DeviceEntryDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceEntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MainTable\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT NOT NULL ," + // 1: type
                "\"IS_OTTA\" INTEGER NOT NULL ," + // 2: isOTTA
                "\"EUI\" TEXT UNIQUE ," + // 3: eui
                "\"APPEUI\" TEXT NOT NULL ," + // 4: appeui
                "\"APPKEY\" TEXT NOT NULL ," + // 5: appkey
                "\"NWKID\" TEXT NOT NULL ," + // 6: nwkid
                "\"DEVADR\" TEXT NOT NULL ," + // 7: devadr
                "\"NWKSKEY\" TEXT NOT NULL ," + // 8: nwkskey
                "\"APPSKEY\" TEXT NOT NULL ," + // 9: appskey
                "\"LATITUDE\" REAL NOT NULL ," + // 10: Latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 11: Longitude
                "\"OUT_TYPE\" TEXT NOT NULL ," + // 12: outType
                "\"K_V\" TEXT NOT NULL ," + // 13: kV
                "\"K_I\" TEXT NOT NULL ," + // 14: kI
                "\"COMMENT\" TEXT NOT NULL ," + // 15: comment
                "\"DATE_OF_LAST_CHANGE\" INTEGER NOT NULL ," + // 16: dateOfLastChange
                "\"IS_DELETED\" INTEGER NOT NULL ," + // 17: isDeleted
                "\"IS_SYNC_SERVER\" INTEGER NOT NULL ," + // 18: isSyncServer
                "\"IS_GEO_OK\" INTEGER NOT NULL ," + // 19: isGeoOK
                "\"COUNTY\" TEXT NOT NULL ," + // 20: county
                "\"CITY\" TEXT NOT NULL ," + // 21: city
                "\"ADDRESS\" TEXT NOT NULL ," + // 22: address
                "\"REGION\" TEXT NOT NULL );"); // 23: region
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MainTable\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceEntry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
        stmt.bindLong(3, entity.getIsOTTA() ? 1L: 0L);
 
        String eui = entity.getEui();
        if (eui != null) {
            stmt.bindString(4, eui);
        }
        stmt.bindString(5, entity.getAppeui());
        stmt.bindString(6, entity.getAppkey());
        stmt.bindString(7, entity.getNwkid());
        stmt.bindString(8, entity.getDevadr());
        stmt.bindString(9, entity.getNwkskey());
        stmt.bindString(10, entity.getAppskey());
        stmt.bindDouble(11, entity.getLatitude());
        stmt.bindDouble(12, entity.getLongitude());
        stmt.bindString(13, entity.getOutType());
        stmt.bindString(14, entity.getKV());
        stmt.bindString(15, entity.getKI());
        stmt.bindString(16, entity.getComment());
        stmt.bindLong(17, entity.getDateOfLastChange().getTime());
        stmt.bindLong(18, entity.getIsDeleted() ? 1L: 0L);
        stmt.bindLong(19, entity.getIsSyncServer() ? 1L : 0L);
        stmt.bindLong(20, entity.getIsGeoOK() ? 1L : 0L);
        stmt.bindString(21, entity.getCounty());
        stmt.bindString(22, entity.getCity());
        stmt.bindString(23, entity.getAddress());
        stmt.bindString(24, entity.getRegion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceEntry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
        stmt.bindLong(3, entity.getIsOTTA() ? 1L: 0L);
 
        String eui = entity.getEui();
        if (eui != null) {
            stmt.bindString(4, eui);
        }
        stmt.bindString(5, entity.getAppeui());
        stmt.bindString(6, entity.getAppkey());
        stmt.bindString(7, entity.getNwkid());
        stmt.bindString(8, entity.getDevadr());
        stmt.bindString(9, entity.getNwkskey());
        stmt.bindString(10, entity.getAppskey());
        stmt.bindDouble(11, entity.getLatitude());
        stmt.bindDouble(12, entity.getLongitude());
        stmt.bindString(13, entity.getOutType());
        stmt.bindString(14, entity.getKV());
        stmt.bindString(15, entity.getKI());
        stmt.bindString(16, entity.getComment());
        stmt.bindLong(17, entity.getDateOfLastChange().getTime());
        stmt.bindLong(18, entity.getIsDeleted() ? 1L: 0L);
        stmt.bindLong(19, entity.getIsSyncServer() ? 1L : 0L);
        stmt.bindLong(20, entity.getIsGeoOK() ? 1L : 0L);
        stmt.bindString(21, entity.getCounty());
        stmt.bindString(22, entity.getCity());
        stmt.bindString(23, entity.getAddress());
        stmt.bindString(24, entity.getRegion());
    }

    @Override
    protected final void attachEntity(DeviceEntry entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceEntry readEntity(Cursor cursor, int offset) {
        DeviceEntry entity = new DeviceEntry( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // type
            cursor.getShort(offset + 2) != 0, // isOTTA
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // eui
            cursor.getString(offset + 4), // appeui
            cursor.getString(offset + 5), // appkey
            cursor.getString(offset + 6), // nwkid
            cursor.getString(offset + 7), // devadr
            cursor.getString(offset + 8), // nwkskey
            cursor.getString(offset + 9), // appskey
            cursor.getDouble(offset + 10), // Latitude
            cursor.getDouble(offset + 11), // Longitude
            cursor.getString(offset + 12), // outType
            cursor.getString(offset + 13), // kV
            cursor.getString(offset + 14), // kI
            cursor.getString(offset + 15), // comment
            new java.util.Date(cursor.getLong(offset + 16)), // dateOfLastChange
                cursor.getShort(offset + 17) != 0, // isDeleted
                cursor.getShort(offset + 18) != 0, // isSyncServer
                cursor.getShort(offset + 19) != 0, // isGeoOK
                cursor.getString(offset + 20), // county
                cursor.getString(offset + 21), // city
                cursor.getString(offset + 22), // address
                cursor.getString(offset + 23) // region
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceEntry entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getString(offset + 1));
        entity.setIsOTTA(cursor.getShort(offset + 2) != 0);
        entity.setEui(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAppeui(cursor.getString(offset + 4));
        entity.setAppkey(cursor.getString(offset + 5));
        entity.setNwkid(cursor.getString(offset + 6));
        entity.setDevadr(cursor.getString(offset + 7));
        entity.setNwkskey(cursor.getString(offset + 8));
        entity.setAppskey(cursor.getString(offset + 9));
        entity.setLatitude(cursor.getDouble(offset + 10));
        entity.setLongitude(cursor.getDouble(offset + 11));
        entity.setOutType(cursor.getString(offset + 12));
        entity.setKV(cursor.getString(offset + 13));
        entity.setKI(cursor.getString(offset + 14));
        entity.setComment(cursor.getString(offset + 15));
        entity.setDateOfLastChange(new java.util.Date(cursor.getLong(offset + 16)));
        entity.setIsDeleted(cursor.getShort(offset + 17) != 0);
        entity.setIsSyncServer(cursor.getShort(offset + 18) != 0);
        entity.setIsGeoOK(cursor.getShort(offset + 19) != 0);
        entity.setCounty(cursor.getString(offset + 20));
        entity.setCity(cursor.getString(offset + 21));
        entity.setAddress(cursor.getString(offset + 22));
        entity.setRegion(cursor.getString(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceEntry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceEntry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceEntry entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
