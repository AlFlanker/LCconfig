package ru.yugsys.vvvresearch.lconfig.model.DataBaseClasses;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ru.yugsys.vvvresearch.lconfig.model.DataEntity.NetData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "NetData".
 */
public class NetDataDao extends AbstractDao<NetData, Long> {

    public static final String TABLENAME = "NetData";

    /**
     * Properties of entity NetData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServiceName = new Property(1, String.class, "serviceName", false, "SERVICE_NAME");
        public final static Property Login = new Property(2, String.class, "login", false, "LOGIN");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Token = new Property(4, String.class, "token", false, "TOKEN");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property CheckMain = new Property(6, Boolean.class, "checkMain", false, "CHECK_MAIN");
    }

    private DaoSession daoSession;


    public NetDataDao(DaoConfig config) {
        super(config);
    }

    public NetDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NetData\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SERVICE_NAME\" TEXT NOT NULL ," + // 1: serviceName
                "\"LOGIN\" TEXT NOT NULL ," + // 2: login
                "\"PASSWORD\" TEXT NOT NULL ," + // 3: password
                "\"TOKEN\" TEXT NOT NULL ," + // 4: token
                "\"ADDRESS\" TEXT NOT NULL ," + // 5: address
                "\"CHECK_MAIN\" INTEGER);"); // 6: checkMain
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NetData\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NetData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getServiceName());
        stmt.bindString(3, entity.getLogin());
        stmt.bindString(4, entity.getPassword());
        stmt.bindString(5, entity.getToken());
        stmt.bindString(6, entity.getAddress());

        Boolean checkMain = entity.getCheckMain();
        if (checkMain != null) {
            stmt.bindLong(7, checkMain ? 1L : 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NetData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getServiceName());
        stmt.bindString(3, entity.getLogin());
        stmt.bindString(4, entity.getPassword());
        stmt.bindString(5, entity.getToken());
        stmt.bindString(6, entity.getAddress());

        Boolean checkMain = entity.getCheckMain();
        if (checkMain != null) {
            stmt.bindLong(7, checkMain ? 1L : 0L);
        }
    }

    @Override
    protected final void attachEntity(NetData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NetData readEntity(Cursor cursor, int offset) {
        NetData entity = new NetData( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // serviceName
                cursor.getString(offset + 2), // login
                cursor.getString(offset + 3), // password
                cursor.getString(offset + 4), // token
                cursor.getString(offset + 5), // address
                cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // checkMain
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NetData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServiceName(cursor.getString(offset + 1));
        entity.setLogin(cursor.getString(offset + 2));
        entity.setPassword(cursor.getString(offset + 3));
        entity.setToken(cursor.getString(offset + 4));
        entity.setAddress(cursor.getString(offset + 5));
        entity.setCheckMain(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NetData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NetData entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NetData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
